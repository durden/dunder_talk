http://en.wikipedia.org/wiki/Dunder
http://wiki.python.org/moin/DunderAlias

title: Dunder what? Python's object model explained.

Python's more advanced features like descriptors, context managers, and
meta-programming can be more easily understood by investigating the object
model and dunder methods.

This talk will explore what dunder methods are, why their useful, and how they
contribute to the overall design of a fully Pythonic object.



Properties:

class User(object):
    def __init__(self, name, email):
        self._name = name
        self._email = None
        self.email = email
    def set_email(self, email):
        if '@' not in email:
            raise TypeError
        self._email = email
    def get_email(self):
        return self._email
    def del_email(self):
        print '__delete'
    def __del__(self):
        print '__del__'
    email = property(get_email, set_email, del_email)

- Pure Python equivalent, just for demonstration:
- http://docs.python.org/howto/descriptor.html

class Property(object):
    "Emulate PyProperty_Type() in Objects/descrobject.c"

    def __init__(self, fget=None, fset=None, fdel=None, doc=None):
        self.fget = fget
        self.fset = fset
        self.fdel = fdel
        self.__doc__ = doc

    def __get__(self, obj, objtype=None):
        if obj is None:
            return self
        if self.fget is None:
            raise AttributeError, "unreadable attribute"
        return self.fget(obj)

    def __set__(self, obj, value):
        if self.fset is None:
            raise AttributeError, "can't set attribute"
        self.fset(obj, value)

    def __delete__(self, obj):
        if self.fdel is None:
            raise AttributeError, "can't delete attribute"
        self.fdel(obj)


- Good/verbose use-case for property
- Update one value automatically that depends on another
- http://www.itmaybeahack.com/book/python-2.6/html/p03/p03c05_properties.html

class Celsius(object):
    """Fundamental Temperature Descriptor."""
    def __init__(self, value=0.0):
        self.value= float(value)
    def __get__(self, instance, owner):
        return self.value
    def __set__(self, instance, value):
        self.value= float(value)

class Farenheit( object ):
    """Requires that the owner have a ``celsius`` attribute."""
    def __get__(self, instance, owner):
        return instance.celsius * 9 / 5 + 32
    def __set__(self, instance, value):
        instance.celsius= (float(value)-32) * 5 / 9

class Temperature(object):
    celsius= Celsius()
    farenheit= Farenheit()


OrderedDict:

- http://code.activestate.com/recipes/576693/
- Interesting side note about __getitem__(self, key)
- http://farmdev.com/src/secrets/magicmethod/index.html

class Test(object):
    def __getitem__(self, items):
        print '%-15s  %s' % (type(items), items)

t = Test()
t[1]
t['hello world']
t[1, 'b', 3.0]
t[5:200:10]
t['a':'z':3]
t[object()]

Pandas:

- http://pandas.pydata.org/pandas-docs/stable/indexing.html#boolean-indexing
- http://pandas.pydata.org
>>> import pandas
>>> s = pandas.Series({'a' : 0., 'b' : 1., 'c' : 2.})
>>> s
a    0
b    1
c    2
>>> s[0]
0.0
>>> s[[2,1]]
c    2
b    1
>>> s[[2,1]][0]
2.0
>>> s[s >= 1]
b    1
c    2

- HOW?!?!
- Two key pieces to this puzzle:
    1. __ge__(self, other_instance)
    2. __getitem__(self, key)

- from pandas/core/series.py:100:
- Ignore fancy wrapping function, etc. boils down to this:
- Comparision between object s and integer, turns into lib.scalar_compare()

1. __ge__(self, other_instance)
    def _comp_method(op, name):
        """
        Wrapper function for Series arithmetic operations, to avoid
        code duplication.
        """
        def na_op(x, y):
            if x.dtype == np.object_:
                if isinstance(y, list):
                    y = lib.list_to_object_array(y)

                if isinstance(y, np.ndarray):
                    result = lib.vec_compare(x, y, op)
                else:
                    result = lib.scalar_compare(x, y, op)
            else:
                result = op(x, y)

            return result

        def wrapper(self, other):
            from pandas.core.frame import DataFrame

            import pdb;pdb.set_trace()
            if isinstance(other, Series):
                name = _maybe_match_name(self, other)
                return Series(na_op(self.values, other.values),
                            index=self.index, name=name)
            elif isinstance(other, DataFrame): # pragma: no cover
                return NotImplemented
            elif isinstance(other, np.ndarray):
                return Series(na_op(self.values, np.asarray(other)),
                            index=self.index, name=self.name)
            else:
                values = self.values
                other = lib.convert_scalar(values, other)

                if issubclass(values.dtype.type, np.datetime64):
                    values = values.view('i8')

                # scalars
                res = na_op(values, other)
                if np.isscalar(res):
                    raise TypeError('Could not compare %s type with Series'
                                    % type(other))
                return Series(na_op(values, other),
                            index=self.index, name=self.name)
        return wrapper

- from pandas/core/series.py:430
2. __getitem__(self, key)

    - key is subtype of np.ndarray (numpy)
    - key is a 'boolean indexer' type
    - Create new series with given boolean indexer

    def __getitem__(self, key):
        try:
            return self.index.get_value(self, key)
        except InvalidIndexError:
            pass
        except KeyError:
            if isinstance(key, tuple) and isinstance(self.index, MultiIndex):
                # kludge
                pass
            else:
                raise
        except Exception:
            raise

        if com.is_iterator(key):
            key = list(key)

        # boolean
        # special handling of boolean data with NAs stored in object
        # arrays. Since we can't represent NA with dtype=bool
        if _is_bool_indexer(key):
            key = self._check_bool_indexer(key)
            key = np.asarray(key, dtype=bool)

        return self._get_with(key)
